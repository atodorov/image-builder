// Package server provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`
}

// Architectures defines model for Architectures.
type Architectures []ArchitectureItem

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequests  []ImageRequest  `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id string `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	Status string `json:"status"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Subscription *Subscription `json:"subscription,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions []DistributionItem

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture   string          `json:"architecture"`
	ImageType      string          `json:"image_type"`
	UploadRequests []UploadRequest `json:"upload_requests"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`
	ServerUrl     string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options AWSUploadRequestOptions `json:"options"`
	Type    string                  `json:"type"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody ComposeRequest

// ComposeImageRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody ComposeImageJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId string) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameter("simple", false, "distribution", ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId string

	err = runtime.BindStyledParameter("simple", false, "composeId", ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/architectures/:distribution", wrapper.GetArchitectures)
	router.POST("/compose", wrapper.ComposeImage)
	router.GET("/composes/:composeId", wrapper.GetComposeStatus)
	router.GET("/distributions", wrapper.GetDistributions)
	router.GET("/openapi.json", wrapper.GetOpenapiJson)
	router.GET("/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xX3W7jNhN9FYLfd9ECsuQ4aZr6Lk2DxkXQLeLt9mJhBDQ1trgriQpJ2XEDvXtBipJF",
	"if4pkAV6Z4jDmTNnzgzHb5jyrOA55Eri6RuWNIGMmJ+3f83/LFJO4id4KUGqD4ViPDdHheAFCMWgvpMQ",
	"Ac9bppJnQikvrSt4JVmRAp5+xheTy6sfrn+8+Wl8McGLADMFmbFRuwLwFEslWL7GVdB8IEKQHa6qAAt4",
	"KZmAWLvxBVq0d/jyC1ClndwKmjAFVJUCZgqyIWQiaOJgxK8318/XVzgYQmIZWcOz/myuttj3d18o3058",
	"V49mYzC47k8l4wL4v4AVnuL/RfsSRrZ+0YCCAZoA3+lrEmx5hyTRUiqesb9JW/djEe9c6yrAMdNMLEv9",
	"wSVMJJCObg6TLWpI56c709eaRE4R7+AahPTVoGVKFjyXMKSKxR4198KyGC/2vuaKqNLXTO33496snfE4",
	"qFPPZbmUVLCiqcMxIudd26rycPFLhz1/c8XghNuX/Qli9EAUus8ViEIwCeiR5eUr+u7p4f7xe3QTerso",
	"Jxmcp58eR+Zi4OBZnMjofMkNePB02MPHj3/cC8GFjyRFWOqfgUylcFoBtVnQeFp04z0yX0ODPjo/wz36",
	"Ux1lHWsITid6524zlry576eh97g0D9K/nw/OQ3bWZG5ROpiGCHTO816D9XKmim1Mb46+ws4VcrYbSaAC",
	"lDkK8IqLjCg8xQWRcstF7OuHJZEwKkXqukqUKqZRROM8FBAnRIWUZ1HXp77iG7m5ZOuk92YrUUJru+Q8",
	"BZJrYy7WJLejxrkwGV+NLydX7R2WK1iDkY4EsQExRNydS6FIZNYBfrK3HSBBn2QnaIexTra+SeDKZFBJ",
	"Xpz1Eh5anFrZvWHIy8wobdsFcqjRa+U10X3AP4GQXvFt9gfHgzSGi6oymljxwSjHcxAbRgGphCgkICU7",
	"iUxzoGXJ0hi1TRHglFGwL2U9vvFtQWgCaBKOdRdpLRjJymkUbbfbkJjjkIt1ZO/K6HF2d//7/H40Ccdh",
	"orK0MxzrOTMycUEgWSPDwT5hfBGOjWILyEnB8BRfhuPwAge4ICox5ETdRpfRW3cxqLTBGlRddxBGW7MY",
	"T/GvoNydTHsUJAMFerh+7rPW9YpWXKBtwmiCFEcp519RWSCyISwlyxQQ6TlmuZkFSi+Klsfe9rKvYd2y",
	"tQh99V5o43qBMdlPxmOz5fFcQW7yJEWRMmoyjb7IWjV7f+eumxIbCbkkEJQyqRBfHUoWkTxGKgEmEJGS",
	"U0YUxFZd9XKsncoyy4jY4akujTY/6KRzsxNS00/Qmm0gRw6R2nmdmF3veD0A3CysQe3ctGRXGHazm9lD",
	"2w0/83j3bjz3VnYP0fU2IDXTlgKOloAs8nigmGqgiov3R2vXZg/chtGESCQVEQpi3bRX76hNdynyYNAy",
	"anDYoiEmUUZS/XRqQI7yXBF0hSOjN/trFnfnhxuu3txNK+S2Ro3wguGocf8unBg1s1i7bQDaQIojjcM7",
	"TFq4/5lJ4uZ7RDGysehPhSP8mmLF/XX/0JR3/xd8w5zdQGdOz7h3yTscj1hH9mEMG6yHaPhQ2/0m7Xsz",
	"JMEFK0CVIpdIJUyimNMy0wT5AVoMSGNAsgDKVpZCvQCStRY5zkARvZcEOOqsM97eavzafQA19p7G+tQe",
	"fbO6NiG8Fe1D9BM0tKqqfwIAAP//euQKerQTAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
